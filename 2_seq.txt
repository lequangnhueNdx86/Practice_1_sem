import re
import matplotlib.pyplot as plt

def analyze_digrams(filename):
  """
  Анализирует текст в файле и вычисляет статистические характеристики для диграммов,
  включая диграммы с пробелами.

  Args:
    filename: Имя файла с текстом.

  Returns:
    Словарь, где ключ - диграмм, а значение - количество его вхождений.
  """

  with open(filename, encoding='utf-8') as file:
    text = file.read()

  digrams = re.findall(r'([а-я ]{1})([а-я ]{1})', text.lower())
  digram_counts = {}
  for digram in digrams:
    digram_str = ''.join(digram)  # Объединяем два символа в строку
    if digram_str in digram_counts:
      digram_counts[digram_str] += 1
    else:
      digram_counts[digram_str] = 1

  sorted_digrams = sorted(digram_counts.items())
  return sorted_digrams

if __name__ == '__main__':
  filename = 'test.txt'
  sorted_digrams = analyze_digrams(filename)

  print("Статистика диграммов (отсортировано по алфавиту):")
  total_digrams = sum(count for _, count in sorted_digrams)

  # Табличная статистика с нумерацией
  print("-----------------------------------------")
  print("№ | Диграмм | Количество | Вероятность")
  print("-----------------------------------------")
  for i, (digram, count) in enumerate(sorted_digrams, 1):  # enumerate для нумерации
    probability = count / total_digrams
    print(f"{i} | {digram} | {count} | {probability:.4f}")

  # Графическая статистика
  digrams, counts = zip(*sorted_digrams)
  plt.figure(figsize=(12, 6))
  plt.bar(digrams, counts)
  plt.xlabel("Диграммы")
  plt.ylabel("Количество")
  plt.title("Частота появления диграммов в тексте")
  plt.xticks(rotation=90)
  plt.tight_layout()
  plt.show()

  # Проверка суммы вероятностей
  total_probability = sum(count / total_digrams for _, count in sorted_digrams)
  print(f"\nСумма вероятностей: {total_probability:.4f}")
